name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

# cancel outdated jobs for the same reference
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:

  build:
    name: Build docker image
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v4
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    -
      name: Build and export image
      uses: docker/build-push-action@v5
      with:
        context: .
        tags: openstreetmap-tile-server:${{ github.sha }}
        outputs: type=docker,dest=/tmp/openstreetmap-tile-server.tar
    -
      name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: openstreetmap-tile-server-${{ github.sha }}
        path: /tmp/openstreetmap-tile-server.tar

  test:
    name: Test docker image
    needs: build
    runs-on: ubuntu-latest
    steps:
    -
      name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: openstreetmap-tile-server-${{ github.sha }}
        path: /tmp
    -
      name: Load image
      run: |
        docker load --input /tmp/openstreetmap-tile-server.tar
        docker image ls -a
    -
      name: Start PostgreSQL
      run: |
        docker volume create osm-data
        docker run -d --name postgres \
          -e POSTGRES_DB=gis \
          -e POSTGRES_USER=renderer \
          -e POSTGRES_PASSWORD=renderer \
          -v osm-data:/var/lib/postgresql/data \
          --shm-size=256M \
          postgis/postgis:18-3.6
        sleep 10
    -
      name: Import Luxembourg
      run: |
        docker run --rm --shm-size=128M \
          --link postgres:postgres \
          -e PGHOST=postgres \
          -e UPDATES=enabled \
          openstreetmap-tile-server:${{ github.sha }} \
          import
    -
      name: Start server
      run: |
        docker run --shm-size=128M \
          --link postgres:postgres \
          -e PGHOST=postgres \
          -e UPDATES=enabled \
          -p 80:80 -d \
          --name osm-www \
          openstreetmap-tile-server:${{ github.sha }} \
          run
        sleep 30
        docker logs osm-www
    -
      name: Download tiles
      run: |
        curl http://localhost/tile/0/0/0.png --fail -o 000.png
        curl http://localhost/tile/1/0/0.png --fail -o 100.png
        curl http://localhost/tile/1/0/1.png --fail -o 101.png
        curl http://localhost/tile/1/1/0.png --fail -o 110.png
        curl http://localhost/tile/1/1/1.png --fail -o 111.png
        curl http://localhost/tile/18/138474/85459.png --fail -o empty.png
        curl http://localhost/tile/18/135536/89345.png --fail -o example.png
    -
      name: Upload tiles
      uses: actions/upload-artifact@v4
      with:
        name: tiles
        path: '*.png'
    -
      name: Verify tiles
      run: |
        sha1sum *.png
        sha1sum --check <<EOF
        c226ca747874fb1307eef853feaf9d8db28cef2b *empty.png
        EOF
        tiles=(`ls *.png`)
        for ((i=0; i<${#tiles[@]}; i++)) ; do
          if [ `file --brief --mime-type "${tiles[$i]}"` != 'image/png' ] ; then
            >&2 echo "ERROR: ${tiles[$i]} is not a image/png file"
            exit 1
          fi
          for ((j=i+1; j<${#tiles[@]}; j++)) ; do
            if ( diff "${tiles[$i]}" "${tiles[$j]}" ) ; then
              >&2 echo "ERROR: ${tiles[$i]} is identical to ${tiles[$j]}"
              exit 2
            fi
          done
        done
    -
      name: Cleanup
      run: |
        docker rm --force --volumes osm-www
        docker rm --force --volumes postgres
        docker volume rm --force osm-data
        docker rmi --force openstreetmap-tile-server:${{ github.sha }}

  publish:
    name: Publish docker image
    needs: test
    runs-on: ubuntu-latest
    # Only run on push to master branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    -
      name: Checkout
      uses: actions/checkout@v4
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: amd64,arm64
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    -
      name: Docker meta (with DockerHub)
      if: ${{ vars.DOCKERHUB_USERNAME != '' }}
      id: meta-with-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ github.repository }}
          ghcr.io/${{ github.repository }}
        tags: |
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    -
      name: Docker meta (without DockerHub)
      if: ${{ vars.DOCKERHUB_USERNAME == '' }}
      id: meta-without-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    -
      name: Login to DockerHub
      uses: docker/login-action@v3
      if: ${{ vars.DOCKERHUB_USERNAME != '' }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    -
      name: Build and push
      uses: docker/build-push-action@v5
      with:
        pull: true
        push: true
        platforms: linux/amd64,linux/arm64/v8
        context: .
        file: ./Dockerfile
        tags: ${{ steps.meta-with-dockerhub.outputs.tags || steps.meta-without-dockerhub.outputs.tags }}
        labels: ${{ steps.meta-with-dockerhub.outputs.labels || steps.meta-without-dockerhub.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
